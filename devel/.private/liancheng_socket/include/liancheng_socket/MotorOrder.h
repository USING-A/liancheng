// Generated by gencpp from file liancheng_socket/MotorOrder.msg
// DO NOT EDIT!


#ifndef LIANCHENG_SOCKET_MESSAGE_MOTORORDER_H
#define LIANCHENG_SOCKET_MESSAGE_MOTORORDER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace liancheng_socket
{
template <class ContainerAllocator>
struct MotorOrder_
{
  typedef MotorOrder_<ContainerAllocator> Type;

  MotorOrder_()
    : header()
    , station_num()
    , form()
    , vel()
    , vel_ac()
    , vel_de()
    , pos_mode()
    , pos()
    , pos_thr()  {
    }
  MotorOrder_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , station_num(_alloc)
    , form(_alloc)
    , vel(_alloc)
    , vel_ac(_alloc)
    , vel_de(_alloc)
    , pos_mode(_alloc)
    , pos(_alloc)
    , pos_thr(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _station_num_type;
  _station_num_type station_num;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _form_type;
  _form_type form;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _vel_type;
  _vel_type vel;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _vel_ac_type;
  _vel_ac_type vel_ac;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _vel_de_type;
  _vel_de_type vel_de;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _pos_mode_type;
  _pos_mode_type pos_mode;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _pos_type;
  _pos_type pos;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _pos_thr_type;
  _pos_thr_type pos_thr;





  typedef boost::shared_ptr< ::liancheng_socket::MotorOrder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::liancheng_socket::MotorOrder_<ContainerAllocator> const> ConstPtr;

}; // struct MotorOrder_

typedef ::liancheng_socket::MotorOrder_<std::allocator<void> > MotorOrder;

typedef boost::shared_ptr< ::liancheng_socket::MotorOrder > MotorOrderPtr;
typedef boost::shared_ptr< ::liancheng_socket::MotorOrder const> MotorOrderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::liancheng_socket::MotorOrder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::liancheng_socket::MotorOrder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::liancheng_socket::MotorOrder_<ContainerAllocator1> & lhs, const ::liancheng_socket::MotorOrder_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.station_num == rhs.station_num &&
    lhs.form == rhs.form &&
    lhs.vel == rhs.vel &&
    lhs.vel_ac == rhs.vel_ac &&
    lhs.vel_de == rhs.vel_de &&
    lhs.pos_mode == rhs.pos_mode &&
    lhs.pos == rhs.pos &&
    lhs.pos_thr == rhs.pos_thr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::liancheng_socket::MotorOrder_<ContainerAllocator1> & lhs, const ::liancheng_socket::MotorOrder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace liancheng_socket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::liancheng_socket::MotorOrder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::liancheng_socket::MotorOrder_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::liancheng_socket::MotorOrder_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37ba2142a148d7827b5cdcab205b8309";
  }

  static const char* value(const ::liancheng_socket::MotorOrder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37ba2142a148d782ULL;
  static const uint64_t static_value2 = 0x7b5cdcab205b8309ULL;
};

template<class ContainerAllocator>
struct DataType< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "liancheng_socket/MotorOrder";
  }

  static const char* value(const ::liancheng_socket::MotorOrder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8[] station_num\n"
"uint8[] form\n"
"int16[] vel\n"
"uint16[] vel_ac\n"
"uint16[] vel_de\n"
"bool[] pos_mode\n"
"int32[] pos\n"
"uint16[] pos_thr\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::liancheng_socket::MotorOrder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.station_num);
      stream.next(m.form);
      stream.next(m.vel);
      stream.next(m.vel_ac);
      stream.next(m.vel_de);
      stream.next(m.pos_mode);
      stream.next(m.pos);
      stream.next(m.pos_thr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorOrder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::liancheng_socket::MotorOrder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::liancheng_socket::MotorOrder_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "station_num[]" << std::endl;
    for (size_t i = 0; i < v.station_num.size(); ++i)
    {
      s << indent << "  station_num[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.station_num[i]);
    }
    s << indent << "form[]" << std::endl;
    for (size_t i = 0; i < v.form.size(); ++i)
    {
      s << indent << "  form[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.form[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "vel_ac[]" << std::endl;
    for (size_t i = 0; i < v.vel_ac.size(); ++i)
    {
      s << indent << "  vel_ac[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.vel_ac[i]);
    }
    s << indent << "vel_de[]" << std::endl;
    for (size_t i = 0; i < v.vel_de.size(); ++i)
    {
      s << indent << "  vel_de[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.vel_de[i]);
    }
    s << indent << "pos_mode[]" << std::endl;
    for (size_t i = 0; i < v.pos_mode.size(); ++i)
    {
      s << indent << "  pos_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pos_mode[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "pos_thr[]" << std::endl;
    for (size_t i = 0; i < v.pos_thr.size(); ++i)
    {
      s << indent << "  pos_thr[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.pos_thr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIANCHENG_SOCKET_MESSAGE_MOTORORDER_H
